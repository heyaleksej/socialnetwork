{"version":3,"sources":["HOCs/RedirectIfNotAuth.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","common/FormControl/FormControl.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileStatus/ProfileStatusWithHooks.tsx","common/FormControl/FormControl.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mstp","state","isAuth","auth","RedirectIfNotAuth","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatusTC","value","onChange","e","currentTarget","Textarea","input","meta","className","style","textarea","Input","FormControl","touched","error","children","hasError","boxTextarea","formControl","errorMessage","createField","placeholder","name","validators","component","text","Field","validate","ProfileDataFormWithRedux","reduxForm","form","profile","handleSubmit","onSubmit","s","type","Object","keys","contacts","map","key","Contact","contactTitle","contactValue","contact","ProfileData","isOwner","goToEditMode","onClick","fullName","lookingForAJob","lookingForAJobDescription","ProfileInfo","saveProfile","Preloader","src","photos","large","userPhoto","target","files","length","addNewPhoto","ProfileDataForm","initialValues","formData","console","log","then","Post","item","message","like","MaxL","MaxLength","AddPostReduxForm","CustomInput","RequiredField","MyPosts","postsElements","posts","p","index","postBlock","values","addPost","addForm","MyPostsContainer","profilePage","newPostText","dispatch","addPostActionCreator","Profile","ProfileContainer","componentDidMount","refreshProfile","userId","this","match","params","authId","history","push","getUserProfileTC","getStatusTC","prevProps","React","compose","id","withRouter"],"mappings":"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","file":"static/js/3.ae66193f.chunk.js","sourcesContent":["import React, {Component, ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../Redux/redux-store\";\n\ntype mstpType = {\n    isAuth: boolean\n}\n\nconst mstp = (state: AppStateType): mstpType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function RedirectIfNotAuth<T>(Component: ComponentType<T>){\n    const RedirectComponent = (props: mstpType) => {\n\n            let {isAuth, ...restProps} = props\n            if (!isAuth) return <Redirect to='/login'/>\n            return <Component {...restProps as T}/>\n    }\n    return connect(mstp)(RedirectComponent)\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\",\"contact\":\"ProfileInfo_contact__1N3gp\",\"error\":\"ProfileInfo_error__rRsoU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"boxTextarea\":\"FormControl_boxTextarea__3TpRe\",\"input\":\"FormControl_input__1Gy2n\",\"textarea\":\"FormControl_textarea__1NuJU\",\"formControl\":\"FormControl_formControl__1J9le\",\"error\":\"FormControl_error__2AmGT\",\"errorMessage\":\"FormControl_errorMessage__3viXV\",\"formErrorSummary\":\"FormControl_formErrorSummary__1ZYjP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__R6Jlo\",\"postBlock\":\"MyPosts_postBlock__3b6E0\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__A0EJd\",\"item\":\"Post_item__ihtu9\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\nimport { ProfileInfoPropsType } from \"../ProfileInfo/ProfileInfo\";\n\ntype ProfileStatusWithHooksType={\n    status:string\n    updateStatusTC:(status:string)=>void\n\n\n}\n\nexport const ProfileStatusWithHooks =(props:ProfileStatusWithHooksType)=>{\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n\n    useEffect(()=>{\n        setStatus(props.status)\n    },[props.status])\n\n    const ActivateEditMode = () => {\n        setEditMode(true)\n    }\n\n    const DeactivateEditMode =()=>{\n        setEditMode(false)\n        props.updateStatusTC(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>)=>{\n        setStatus(e.currentTarget.value)\n\n    }\n\n    return (\n            <div>\n                {!editMode &&\n                <div>\n                   <b>Status</b>:<span onDoubleClick={ActivateEditMode}>{props.status || \"----\"}</span>\n                </div>}\n                {editMode &&\n                <input autoFocus onBlur={DeactivateEditMode} value={status} onChange={onStatusChange}/>}\n            </div>)\n\n}\n","\n\nimport React from 'react';\nimport style from './FormControl.module.css';\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form';\nimport {FieldValidatorType} from '../../Utils/Validators/Validators';\n\ntype FormControlPropsType = {\n    meta: WrappedFieldMetaProps\n}\n\nexport const Textarea: React.FC<WrappedFieldProps>  = (props) => {\n    // const {input, meta, child, ...restProps} = props\n    const {input, meta, ...restProps} = props;\n    return (\n        <FormControl {...props}>\n            <textarea {...input} {...restProps} className={style.textarea}/>\n        </FormControl>\n    )\n}\n\n\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\n    // const {input, meta, child, ...restProps} = props\n    const {input, meta, ...restProps} = props;\n    return (\n        <FormControl {...props}>\n            <input {...input} {...restProps} className={style.input}/>\n        </FormControl>\n    )\n}\n\n// @ts-ignore\nconst FormControl: React.FC<FormControlPropsType> = ({input, meta: {touched, error}, children, ...props}) => {\n    const hasError = touched && error\n    return (\n        <div className={`${style.boxTextarea} ${style.formControl} ${hasError ? style.error : ''}`}>\n            <div>\n                {children}\n            </div>\n            {hasError && <p className={style.errorMessage}>{error}</p>}\n        </div>\n    )\n}\n\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\n                                                         name: FormKeysType,\n                                                         validators: Array<FieldValidatorType>,\n                                                         component: React.FC<WrappedFieldProps>,\n                                                         props = {}, text = \"\") {\n    return <div>\n        <Field placeholder={placeholder} name={name}\n               validate={validators}\n               component={component}\n               {...props}\n        /> {text}\n    </div>\n}\n\nexport type GetStringKeys<T> = Extract<keyof T, string>","import React, { FC } from \"react\";\nimport {ContactsType, ProfileDataPropsType} from \"./ProfileInfo\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, Input, Textarea} from \"../../../common/FormControl/FormControl\";\nimport s from './ProfileInfo.module.css'\n\ntype FormDataType = {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\nexport type PhotosType = {\n    small: string | null\n    large: string | null\n}\n\nexport type ProfileType = {\n    userId: number\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    contacts: ContactsType\n    photos: PhotosType\n    aboutMe: string\n}\n\ntype PropsType = {\n    profile: ProfileType\n}\n\n\nconst ProfileData: FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({profile, handleSubmit, error}) => {\n    return <form onSubmit={handleSubmit}>\n        <button>save</button>\n        {error && <div className={s.error}>{error}</div>}\n\n        <div>\n            <b>fullName</b>: {createField('Full name', 'fullName',[], Input\n            )}\n        </div>\n        <div>\n            <b>aboutMe</b>: {createField('что нибудь', 'aboutMe',[], Input\n        )}\n        </div>\n        <div>\n            <b>Looking for a job</b>:{createField('da', 'lookingForAJob',[], Input, {type: 'checkbox'}\n        )}\n        </div>\n        <div>\n            <b> что могу </b>: {createField('Расскажите о своем опыте', 'lookingForAJobDescription',[], Textarea)}\n        </div>\n        <div>\n            <b> Contacts </b>: {profile && Object.keys(profile.contacts).map((key) => {\n            return <div key={key}>\n                <b>{key}</b>: {createField(key, 'contacts.'+ key,[], Input)}\n            </div>\n        })}\n        </div>\n    </form>\n}\n\nconst ProfileDataFormWithRedux = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileData)\n\nexport default ProfileDataFormWithRedux\n\n","import React, {ChangeEvent, useState} from \"react\";\nimport s from './ProfileInfo.module.css'\nimport {ProfileTypeFromServer} from \"../../../Redux/profileReducer\";\nimport {Preloader} from \"../../../common/Preloader/Preloader\";\nimport {ProfileStatusWithHooks} from \"../ProfileStatus/ProfileStatusWithHooks\";\nimport userPhoto from './../../../common/img/Sample_User_Icon.png'\nimport ProfileDataForm, {PhotosType} from \"./ProfileDataForm\";\nimport ProfileDataFormWithRedux from \"./ProfileDataForm\";\n\nexport type ProfileInfoPropsType = {\n    profile?: ProfileTypeFromServer | null\n    status: string\n    updateStatusTC: (status: string) => void\n    isOwner: boolean\n    addNewPhoto: (photo: File) => void\n    saveProfile: (profile: ProfileType) => Promise<any>\n\n}\n\nexport type ContactsType = {\n    github: string\n    vk: string\n    facebook: string\n    instagram: string\n    twitter: string\n    website: string\n    youtube: string\n    mainLink: string\n}\n\ntype ContactsPropsType = {\n    contactTitle: string\n    contactValue: string\n}\n\nexport type ProfileDataPropsType = {\n    profile: ProfileTypeFromServer\n    isOwner: boolean\n    goToEditMode: ()=>void\n}\n\nexport type ProfileType = {\n    userId: number\n    lookingForAJob: boolean\n    lookingForAJobDescription: string\n    fullName: string\n    contacts: ContactsType\n    photos: PhotosType\n    aboutMe: string\n}\n\nexport const Contact = ({contactTitle, contactValue}: ContactsPropsType) => {\n    return <div className={s.contact}>\n        <b>{contactTitle}</b>:{contactValue}\n    </div>\n}\n\n\n\nconst ProfileData = ({profile, isOwner, goToEditMode}: ProfileDataPropsType) => {\n    return <div>\n        {isOwner && <button onClick={goToEditMode}>edit</button>}\n        <div>\n            <b>fullName</b>:{profile.fullName}\n        </div>\n        <div>\n            <b>Looking for a job</b>:{profile.lookingForAJob ? 'yes' : 'no'}\n        </div>\n        {profile.lookingForAJob &&\n        <div>\n            <b> что могу </b>: {profile.lookingForAJobDescription}\n        </div>}\n        <div>\n            <b> Contacts </b>: {profile && Object.keys(profile.contacts).map((key) => {\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\n        })}\n        </div>\n    </div>\n}\n\n\n\n\n\n\nexport function ProfileInfo({profile, saveProfile,...props}: ProfileInfoPropsType) {\n    const [editMode, setEditMode] = useState(false)\n\n    if (!profile) {\n        return <Preloader/>\n    }\n\n    const AddAvatar = (e: ChangeEvent<HTMLInputElement>) => {\n        if (e.target.files && e.target.files.length) {\n            props.addNewPhoto(e.target.files[0])\n        }\n    }\n\n    const goToEditModeHandler =()=>{\n        setEditMode(true)\n    }\n\n    const onSubmit = (formData: ProfileType) => {\n        console.log(formData)\n        saveProfile(formData).then(\n            () => {setEditMode(false)}\n        );\n    }\n\n\n    return (\n        <div>\n            <ProfileStatusWithHooks status={props.status} updateStatusTC={props.updateStatusTC}/>\n            <img src={profile.photos.large || userPhoto}/>\n\n            {props.isOwner && <input type={'file'} onChange={AddAvatar}/>}\n            {editMode ? <ProfileDataFormWithRedux initialValues={profile} profile={profile} onSubmit={onSubmit} />: <ProfileData profile={profile} isOwner={props.isOwner} goToEditMode={goToEditModeHandler}/>}\n\n            <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTgQyG5V9oSD7hP7SZePDYuC56TCQkLWUt6Rg&usqp=CAU\"/>\n        </div>\n\n    )\n}\n","import React from 'react';\nimport s from './Post.module.css'\nimport {PostsType} from \"../../../../Redux/store\";\n\n\nconst Post = (props:PostsType) => {\n    return (\n        <div className={s.item}>\n            <img src={'https://topmsg.ru/wp-content/uploads/anonymous.jpg'}/>\n            {props.message}\n            <div>\n                <span>Like{props.like}</span>\n            </div>\n        </div>);\n\n\n}\n\nexport default Post;","import React from 'react';\nimport s from './MyPosts.module.css'\nimport Post from \"./Post/Post\";\nimport {PostsType} from \"../../../Redux/store\";\nimport {CustomButton} from \"../../ SuperButton/CustomButton\";\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\nimport { CustomInput } from '../../CustomInput/CustomForms';\nimport {MaxLength, RequiredField} from \"../../../Utils/Validators/Validators\";\n\n\ntype MyPostsPropsType = {\n    posts: Array<PostsType>\n    addPost: (newPostText: string) => void\n    message: string\n    // onPostChange: (e: ChangeEvent<HTMLTextAreaElement>) => void\n\n}\n\ntype MyPostsFormType = {\n    addForm: string\n}\n\nconst MaxL = MaxLength(10)\n\nconst MyPostForm: React.FC<InjectedFormProps<MyPostsFormType>> = (props) => {\n    return <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field placeholder={\"Enter text...\"}\n                   component={CustomInput}\n                   type={\"input\"}\n                   name={'addForm'}\n                   validate={[RequiredField, MaxL]}\n            />\n        </div>\n        <div>\n            <button> Add Post</button>\n        </div>\n    </form>\n\n}\nconst AddPostReduxForm = reduxForm<MyPostsFormType>({form: 'addForm'})(MyPostForm)\n\n\nconst MyPosts = (props: MyPostsPropsType) => {\n\n    const onSubmit = (values: any) => {\n        props.addPost(values.addForm)\n    }\n\n    const postsElements = props.posts.map((p, index) => <Post key={index} message={p.message} like={p.like}/>)\n\n\n    // function addPost() {\n    //     console.log('addpost')\n    //     props.addPost()\n    //\n    // }\n\n    // const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    //     console.log('onPostChange')\n    //     props.onPostChange(e)\n    // }\n\n    return <div className={s.postBlock}>\n\n        <h3> My Posts</h3>\n        <AddPostReduxForm onSubmit={onSubmit}/>\n        {/*<div>*/}\n        {/*    <textarea onChange={onPostChange} value={props.message}/>*/}\n        {/*</div>*/}\n        {/*<div>*/}\n        {/*    <button onClick={addPost}>Add Post</button>*/}\n        {/*</div>*/}\n        {/*<CustomButton title={'add post'} onClick={addPost}/>*/}\n        <div className={s.posts}>\n            {postsElements}\n        </div>\n    </div>;\n}\n\n\nexport default MyPosts;\n\n","import React, {ChangeEvent} from 'react';\nimport {addPostActionCreator, onPostChangeActionCreator} from '../../../Redux/profileReducer';\nimport MyPosts from './MyPosts';\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../Redux/redux-store\";\nimport {PostsType} from \"../../../Redux/store\";\nimport {Dispatch} from \"redux\";\n\ntype MapStatePropsType = {\n    posts: Array<PostsType>\n    message:string\n\n}\n\ntype mapDispatchPropsType = {\n    addPost: (newPostText:string) => void,\n    // onPostChange: (e: ChangeEvent<HTMLTextAreaElement>) => void\n\n}\n\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        posts: state.profilePage.posts,\n        message: state.profilePage.newPostText\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\n    return {\n        addPost: (newPostText:string) => dispatch(addPostActionCreator(newPostText)),\n        // onPostChange: (e: ChangeEvent<HTMLTextAreaElement>) => dispatch(onPostChangeActionCreator(e.currentTarget.value))\n    }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\n\n\n","import React, {ChangeEvent} from 'react';\nimport {ProfileInfo, ProfileType} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileTypeFromServer} from \"../../Redux/profileReducer\";\n\ntype ProfilePropsType = {\n    profile?: ProfileTypeFromServer | null\n    status: string\n    updateStatusTC:(status:string)=>void\n    isOwner: boolean\n    addNewPhoto:(photo: File)=>void\n    saveProfile: (profile: ProfileType) => Promise<any>\n\n\n\n\n\n}\n\n\n\nconst Profile = (props: ProfilePropsType) => {\n    return (\n        <div>\n            <ProfileInfo  profile={props.profile} status={props.status} updateStatusTC={props.updateStatusTC} isOwner={props.isOwner} addNewPhoto={props.addNewPhoto} saveProfile={props.saveProfile}/>\n            <MyPostsContainer />\n        </div>);\n\n\n}\n\nexport default Profile;","import React from 'react';\nimport Profile from './Profile';\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/redux-store\";\nimport {getStatusTC, initialStateType, getUserProfileTC, updateStatusTC, addNewPhoto, saveProfile} from '../../Redux/profileReducer';\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {RedirectIfNotAuth} from \"../../HOCs/RedirectIfNotAuth\";\nimport { compose } from 'redux';\nimport {ProfileType} from \"./ProfileInfo/ProfileInfo\";\n\ntype MapStatePropsType = initialStateType\n\ntype mapDispatchPropsType = {\n    getUserProfileTC: (userId: string | undefined) => void\n    getStatusTC:(userId: string | undefined)=> void\n    updateStatusTC:(status:string)=>void\n    addNewPhoto:(file:any)=>void\n    saveProfile: (profile: ProfileType) => Promise<any>\n\n\n}\ntype ProfilePropsType = MapStatePropsType & mapDispatchPropsType\n\ntype PathParamsType = {\n    userId?: string | undefined\n}\n\nexport type WithRouterPropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\n\nclass ProfileContainer extends React.Component<WithRouterPropsType> {\n\n    refreshProfile(){\n        let userId = this.props.match.params.userId\n        if (!userId){\n            userId = this.props.authId\n            if (!userId){\n                this.props.history.push('./login')\n            }\n        }\n        this.props.getUserProfileTC(userId)\n\n        this.props.getStatusTC(userId)\n    }\n\n\n    componentDidMount = () => {\n       this.refreshProfile()\n    }\n    componentDidUpdate(prevProps:any) {\n        if (this.props.match.params.userId != prevProps.match.params.userId)\n        this.refreshProfile()\n\n    }\n\n    render() {\n        console.log('render profile ')\n        return (\n            <Profile {...this.props}\n                     isOwner ={!this.props.match.params.userId }\n                     profile={this.props.profile}\n                     status={this.props.status}\n                     updateStatusTC={this.props.updateStatusTC}\n                     addNewPhoto={this.props.addNewPhoto}\n                     saveProfile={this.props.saveProfile}\n\n\n            />\n        );\n\n    }\n}\n\nlet mapToStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText,\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        isAuth: state.auth.isAuth,\n        authId: state.auth.id\n\n\n    }\n\n}\n// let URLDataContComp = withRouter(ProfileCont)\n// let URLDataContCompAuth = RedirectIfNotAuth(URLDataContComp)\n\nexport default compose<React.ComponentType>(RedirectIfNotAuth,\n    connect(mapToStateToProps, {getUserProfileTC, getStatusTC, updateStatusTC, addNewPhoto, saveProfile}),\n    withRouter)\n(ProfileContainer) as React.FunctionComponent<any>"],"sourceRoot":""}