{"version":3,"sources":["HOCs/RedirectIfNotAuth.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileStatus/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mstp","state","isAuth","auth","RedirectIfNotAuth","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatusTC","value","onChange","e","currentTarget","ProfileInfo","profile","src","photos","small","contacts","vk","github","instagram","facebook","twitter","youtube","fullName","lookingForAJob","lookingForAJobDescription","className","s","descriptionBlock","Preloader","Post","item","message","like","MaxL","MaxLength","AddPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","CustomInput","type","name","validate","RequiredField","MyPosts","postsElements","posts","map","p","index","postBlock","values","addPost","addForm","MyPostsContainer","profilePage","newPostText","dispatch","addPostActionCreator","Profile","ProfileClass","componentDidMount","userId","match","params","authId","history","push","getUserProfileTC","getStatusTC","console","log","this","React","compose","id","withRouter"],"mappings":"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","file":"static/js/3.a9f305c1.chunk.js","sourcesContent":["import React, {Component, ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../Redux/redux-store\";\n\ntype mstpType = {\n    isAuth: boolean\n}\n\nconst mstp = (state: AppStateType): mstpType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function RedirectIfNotAuth<T>(Component: ComponentType<T>){\n    const RedirectComponent = (props: mstpType) => {\n\n            let {isAuth, ...restProps} = props\n            if (!isAuth) return <Redirect to='/login'/>\n            return <Component {...restProps as T}/>\n    }\n    return connect(mstp)(RedirectComponent)\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3cd8Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__R6Jlo\",\"postBlock\":\"MyPosts_postBlock__3b6E0\",\"posts\":\"MyPosts_posts__3tZ1c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__A0EJd\",\"item\":\"Post_item__ihtu9\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\nimport { ProfileInfoPropsType } from \"../ProfileInfo/ProfileInfo\";\n\ntype ProfileStatusWithHooksType={\n    status:string\n    updateStatusTC:(status:string)=>void\n\n\n}\n\nexport const ProfileStatusWithHooks =(props:ProfileStatusWithHooksType)=>{\n    const [editMode, setEditMode] = useState(false)\n    const [status, setStatus] = useState(props.status)\n\n    useEffect(()=>{\n        setStatus(props.status)\n    },[props.status])\n\n    const ActivateEditMode = () => {\n        setEditMode(true)\n    }\n\n    const DeactivateEditMode =()=>{\n        setEditMode(false)\n        props.updateStatusTC(status)\n    }\n\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>)=>{\n        setStatus(e.currentTarget.value)\n\n    }\n\n    return (\n            <div>\n                {!editMode &&\n                <h1 onDoubleClick={ActivateEditMode}>{props.status || \"----\"}</h1>}\n                {editMode &&\n                <input autoFocus onBlur={DeactivateEditMode} value={status} onChange={onStatusChange}/>}\n            </div>)\n\n}\n","import React from \"react\";\nimport s from './ProfileInfo.module.css'\nimport { ProfileTypeFromServer} from \"../../../Redux/profileReducer\";\nimport { Preloader } from \"../../../common/Preloader/Preloader\";\nimport {ProfileStatusWithHooks} from \"../ProfileStatus/ProfileStatusWithHooks\";\n\nexport type ProfileInfoPropsType = {\n    profile?: ProfileTypeFromServer | null\n    status: string\n    updateStatusTC:(status:string)=>void\n\n}\n\n\nexport function ProfileInfo(props:ProfileInfoPropsType) {\n    if (!props.profile) {\n        return <Preloader/>\n    }\n      return (\n        <div>\n            <ProfileStatusWithHooks status={props.status} updateStatusTC={props.updateStatusTC}/>\n            <div>\n                   <div>\n                        <span>\n                            <img src={props.profile?.photos.small}/>\n                        </span>\n                        <div>{props.profile?.contacts.vk}</div>\n                        <div>{props.profile?.contacts.github}</div>\n                        <div>{props.profile?.contacts.instagram}</div>\n                        <div>{props.profile?.contacts.facebook}</div>\n                        <div>{props.profile?.contacts.twitter}</div>\n                        <div>{props.profile?.contacts.youtube}</div>\n                        <div>{props.profile?.fullName}</div>\n                        <div>{props.profile?.lookingForAJob}</div>\n                        <div>{props.profile?.lookingForAJobDescription}</div>\n\n                    </div>\n                <img\n                    src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTgQyG5V9oSD7hP7SZePDYuC56TCQkLWUt6Rg&usqp=CAU\"/>\n            </div>\n            <div className={s.descriptionBlock}>\n                ava + description\n            </div>\n        </div>\n\n    )\n}","import React from 'react';\nimport s from './Post.module.css'\nimport {PostsType} from \"../../../../Redux/store\";\n\n\nconst Post = (props:PostsType) => {\n    return (\n        <div className={s.item}>\n            <img src={'https://topmsg.ru/wp-content/uploads/anonymous.jpg'}/>\n            {props.message}\n            <div>\n                <span>Like{props.like}</span>\n            </div>\n        </div>);\n\n\n}\n\nexport default Post;","import React from 'react';\nimport s from './MyPosts.module.css'\nimport Post from \"./Post/Post\";\nimport {PostsType} from \"../../../Redux/store\";\nimport {CustomButton} from \"../../ SuperButton/CustomButton\";\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\nimport { CustomInput } from '../../CustomInput/CustomForms';\nimport {MaxLength, RequiredField} from \"../../../Utils/Validators/Validators\";\n\n\ntype MyPostsPropsType = {\n    posts: Array<PostsType>\n    addPost: (newPostText: string) => void\n    message: string\n    // onPostChange: (e: ChangeEvent<HTMLTextAreaElement>) => void\n\n}\n\ntype MyPostsFormType = {\n    addForm: string\n}\n\nconst MaxL = MaxLength(10)\n\nconst MyPostForm: React.FC<InjectedFormProps<MyPostsFormType>> = (props) => {\n    return <form onSubmit={props.handleSubmit}>\n        <div>\n            <Field placeholder={\"Enter text...\"}\n                   component={CustomInput}\n                   type={\"input\"}\n                   name={'addForm'}\n                   validate={[RequiredField, MaxL]}\n            />\n        </div>\n        <div>\n            <button> Add Post</button>\n        </div>\n    </form>\n\n}\nconst AddPostReduxForm = reduxForm<MyPostsFormType>({form: 'addForm'})(MyPostForm)\n\n\nconst MyPosts = (props: MyPostsPropsType) => {\n\n    const onSubmit = (values: any) => {\n        props.addPost(values.addForm)\n    }\n\n    const postsElements = props.posts.map((p, index) => <Post key={index} message={p.message} like={p.like}/>)\n\n\n    // function addPost() {\n    //     console.log('addpost')\n    //     props.addPost()\n    //\n    // }\n\n    // const onPostChange = (e: ChangeEvent<HTMLTextAreaElement>) => {\n    //     console.log('onPostChange')\n    //     props.onPostChange(e)\n    // }\n\n    return <div className={s.postBlock}>\n\n        <h3> My Posts</h3>\n        <AddPostReduxForm onSubmit={onSubmit}/>\n        {/*<div>*/}\n        {/*    <textarea onChange={onPostChange} value={props.message}/>*/}\n        {/*</div>*/}\n        {/*<div>*/}\n        {/*    <button onClick={addPost}>Add Post</button>*/}\n        {/*</div>*/}\n        {/*<CustomButton title={'add post'} onClick={addPost}/>*/}\n        <div className={s.posts}>\n            {postsElements}\n        </div>\n    </div>;\n}\n\n\nexport default MyPosts;\n\n","import React, {ChangeEvent} from 'react';\nimport {addPostActionCreator, onPostChangeActionCreator} from '../../../Redux/profileReducer';\nimport MyPosts from './MyPosts';\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../../Redux/redux-store\";\nimport {PostsType} from \"../../../Redux/store\";\nimport {Dispatch} from \"redux\";\n\ntype MapStatePropsType = {\n    posts: Array<PostsType>\n    message:string\n\n}\n\ntype mapDispatchPropsType = {\n    addPost: (newPostText:string) => void,\n    // onPostChange: (e: ChangeEvent<HTMLTextAreaElement>) => void\n\n}\n\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        posts: state.profilePage.posts,\n        message: state.profilePage.newPostText\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\n    return {\n        addPost: (newPostText:string) => dispatch(addPostActionCreator(newPostText)),\n        // onPostChange: (e: ChangeEvent<HTMLTextAreaElement>) => dispatch(onPostChangeActionCreator(e.currentTarget.value))\n    }\n}\n\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\n\n\n\n","import React from 'react';\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\nimport {ProfileTypeFromServer} from \"../../Redux/profileReducer\";\n\ntype ProfilePropsType = {\n    profile?: ProfileTypeFromServer | null\n    status: string\n    updateStatusTC:(status:string)=>void\n\n\n}\n\n\n\nconst Profile = (props: ProfilePropsType) => {\n    return (\n        <div>\n            <ProfileInfo profile={props.profile} status={props.status} updateStatusTC={props.updateStatusTC} />\n            <MyPostsContainer />\n        </div>);\n\n\n}\n\nexport default Profile;","import React from 'react';\nimport Profile from './Profile';\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/redux-store\";\nimport {getStatusTC, initialStateType, getUserProfileTC, updateStatusTC} from '../../Redux/profileReducer';\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\nimport {RedirectIfNotAuth} from \"../../HOCs/RedirectIfNotAuth\";\nimport { compose } from 'redux';\n\ntype MapStatePropsType = initialStateType\n\ntype mapDispatchPropsType = {\n    getUserProfileTC: (userId: string | undefined) => void\n    getStatusTC:(userId: string | undefined)=> void\n    updateStatusTC:(status:string)=>void\n\n}\ntype ProfilePropsType = MapStatePropsType & mapDispatchPropsType\n\ntype PathParamsType = {\n    userId?: string | undefined\n}\n\nexport type WithRouterPropsType = RouteComponentProps<PathParamsType> & ProfilePropsType\n\nclass ProfileClass extends React.Component<WithRouterPropsType> {\n\n    componentDidMount = () => {\n        let userId = this.props.match.params.userId\n        if (!userId){\n            userId = this.props.authId\n            if (!userId){\n                this.props.history.push('./login')\n            }\n        }\n        this.props.getUserProfileTC(userId)\n\n        this.props.getStatusTC(userId)\n    }\n\n    render() {\n        console.log('render profile ')\n        return (\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatusTC={this.props.updateStatusTC}/>\n        );\n\n    }\n}\n\nlet mapToStateToProps = (state: AppStateType): MapStatePropsType => {\n    // console.log('mapToStateToProps profile')\n    return {\n        posts: state.profilePage.posts,\n        newPostText: state.profilePage.newPostText,\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        isAuth: state.auth.isAuth,\n        authId: state.auth.id\n\n\n    }\n\n}\n// let URLDataContComp = withRouter(ProfileCont)\n// let URLDataContCompAuth = RedirectIfNotAuth(URLDataContComp)\n\nexport default compose<React.ComponentType>(RedirectIfNotAuth,\n    connect(mapToStateToProps, {getUserProfileTC, getStatusTC, updateStatusTC}),\n    withRouter)\n(ProfileClass);"],"sourceRoot":""}