{"version":3,"sources":["components/Dialogs/Dialogs.module.css","HOCs/RedirectIfNotAuth.tsx","components/MiniAvatars/MiniAvatars.module.css","components/Dialogs/Dialogs/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/MiniAvatars/Avatar.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mstp","state","isAuth","auth","RedirectIfNotAuth","Component","connect","props","restProps","to","Dialog","path","id","className","s","dialog","active","name","Message","message","text","Avatar","avatarImg","src","ava","Dialogs","dialogsElements","dialogs","map","d","messagesElements","messages","m","index","MaxL","MaxLength","DialogsReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","CustomInput","type","validate","RequiredField","dialogsItems","values","addMessage","newMessage","compose","dialogsPage","newTextMessage","dispatch","addMessageActionCreator","onMessageChange","event","onMessageChangeActionCreator","currentTarget","value"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,mHCQ5KC,EAAO,SAACC,GACV,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAqBC,GAOjC,OAAOC,YAAQN,EAARM,EANmB,SAACC,GAAqB,IAEnCL,EAAwBK,EAAxBL,OAAWM,EAFuB,YAEVD,EAFU,YAGvC,OAAKL,EACE,cAACG,EAAD,eAAeG,IADF,cAAC,IAAD,CAAUC,GAAG,gB,oBClB7CX,EAAOC,QAAU,CAAC,UAAY,iC,kFCWfW,EAPF,SAACH,GACV,IAAII,EAAO,YAAcJ,EAAMK,GAC/B,OACI,qBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,SAA2C,cAAC,IAAD,CAASP,GAAIE,EAAb,SAAoBJ,EAAMU,UCE9DC,EAFA,SAACX,GAAD,OAA2B,qBAAKM,UAAWC,IAAEK,QAAlB,SAA4BZ,EAAMa,Q,kBCI7DC,EARD,SAACd,GACX,OAEI,8BACI,qBAAKM,UAAWC,IAAEQ,UAAWC,IAAKhB,EAAMiB,S,kCCmErCC,MAnDf,SAAiBlB,GACb,IAAImB,EAAkBnB,EAAMoB,QAAQC,KACnC,SAAAC,GAAC,OAAI,uBAAiBhB,UAAWC,IAAEQ,UAA9B,UACF,cAAC,EAAD,CAAQL,KAAMY,EAAEZ,KAAML,GAAIiB,EAAEjB,KAC5B,cAAC,EAAD,CAAQY,IAAKK,EAAEL,QAFFK,EAAEjB,OAMfkB,EAAmBvB,EAAMwB,SAASH,KAAI,SAACI,EAAGC,GAAJ,OAAc,cAAC,EAAD,CAAqBb,KAAMY,EAAEZ,MAAfa,MAIhEC,EAAOC,YAAU,IAmBjBC,EAAmBC,YAA2B,CAACC,KAAM,cAAlCD,EAhByC,SAAC9B,GAC/D,OAAO,uBAAMgC,SAAUhC,EAAMiC,aAAtB,UACH,8BACI,cAACC,EAAA,EAAD,CAAOC,YAAa,mBACbC,UAAWC,IACXC,KAAK,WACL5B,KAAM,aACN6B,SAAU,CAACC,IAAeb,OAGrC,8BACI,2DAaZ,OACI,sBAAKrB,UAAWC,IAAEa,QAAlB,UACI,uBAAMd,UAAWC,IAAEkC,aAAnB,cAAmCtB,EAAnC,OACA,sBAAKb,UAAWC,IAAEiB,SAAlB,UACKD,EAED,cAACM,EAAD,CAAkBG,SAZb,SAACU,GACd1C,EAAM2C,WAAWD,EAAOE,sB,iCCjBjBC,sBAA6B9C,aAhBpB,SAACL,GACrB,MAAO,CACH0B,QAAS1B,EAAMoD,YAAY1B,QAC3BI,SAAU9B,EAAMoD,YAAYtB,SAC5BX,KAAMnB,EAAMoD,YAAYC,eACxBnD,KAAMF,EAAME,KAAKD,WAIE,SAACqD,GACxB,MAAO,CACHL,WAAW,SAACI,GAAD,OAA2BC,EAASC,YAAwBF,KACvEG,gBAAgB,SAACC,GAAD,OAAyCH,EAASI,YAA6BD,EAAME,cAAcC,aAIlCzD,IAA1EgD,CAA6F3B","file":"static/js/4.9831c555.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import React, {Component, ComponentType} from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\nimport {AppStateType} from \"../Redux/redux-store\";\n\ntype mstpType = {\n    isAuth: boolean\n}\n\nconst mstp = (state: AppStateType): mstpType => {\n    return {\n        isAuth: state.auth.isAuth\n    }\n}\n\nexport function RedirectIfNotAuth<T>(Component: ComponentType<T>){\n    const RedirectComponent = (props: mstpType) => {\n\n            let {isAuth, ...restProps} = props\n            if (!isAuth) return <Redirect to='/login'/>\n            return <Component {...restProps as T}/>\n    }\n    return connect(mstp)(RedirectComponent)\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"avatarImg\":\"MiniAvatars_avatarImg__3yFfc\"};","import React from 'react';\nimport {NavLink} from 'react-router-dom';\nimport s from './../Dialogs.module.css'\n\n\nconst Dialog=(props:any)=>{\n    let path = \"/dialogs/\" + props.id\n    return(\n        <div className={s.dialog + ' ' + s.active}><NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\nexport default Dialog;","import React from 'react';\nimport s from './../Dialogs.module.css'\n\n\ntype MessagePropsType={\n    text: string\n}\n\nconst Message =(props:MessagePropsType)=> <div className={s.message}>{props.text}</div>\n\nexport default Message;","import React from 'react';\nimport s from '../MiniAvatars/MiniAvatars.module.css'\n\n\nconst Avatar =(props:any)=>{\n    return(\n\n        <div >\n            <img className={s.avatarImg} src={props.ava}/>\n        </div>\n    )\n}\nexport default Avatar;","import React, {ChangeEvent} from 'react';\nimport s from './Dialogs.module.css'\nimport Dialog from './Dialogs/Dialog';\nimport Message from './Message/Message';\nimport {DialogsType, MessageType} from \"../../Redux/store\";\nimport Avatar from '../MiniAvatars/Avatar';\nimport {CustomInput} from \"../CustomInput/CustomForms\";\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {MaxLength, RequiredField} from \"../../Utils/Validators/Validators\";\n\ntype DialogsPropsType = {\n    dialogs: Array<DialogsType>\n    text: string\n    messages: Array<MessageType>\n    addMessage: (message: string) => void\n    onMessageChange: (event: ChangeEvent<HTMLInputElement>) => void\n    auth: boolean\n}\n\ntype DialogsFormType = {\n    newMessage: string\n}\n\n\nfunction Dialogs(props: DialogsPropsType) {\n    let dialogsElements = props.dialogs.map\n    (d => <span key={d.id} className={s.avatarImg}>\n        <Dialog name={d.name} id={d.id}/>\n        <Avatar ava={d.ava}/>\n    </span>   // мапиться по диалогам\n    )\n\n    let messagesElements = props.messages.map((m, index) => <Message key={index} text={m.text}/>)\n\n    // let messagesAvatar =props.dialogsPage.dialogs.map(m=> <Avatar ava={m.ava}/>)\n\n    const MaxL = MaxLength(50)\n\n\n    const DialogsForm: React.FC<InjectedFormProps<DialogsFormType>> = (props) => {\n        return <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field placeholder={\"Enter message...\"}\n                       component={CustomInput}\n                       type=\"textarea\"\n                       name={'newMessage'}\n                       validate={[RequiredField, MaxL]}\n                />\n            </div>\n            <div>\n                <button> Send Message</button>\n            </div>\n        </form>\n\n    }\n    const DialogsReduxForm = reduxForm<DialogsFormType>({form: 'newMessage'})(DialogsForm)\n\n    const onSubmit = (values: any) => {\n        props.addMessage(values.newMessage)\n    }\n\n\n\n    return (\n        <div className={s.dialogs}>\n            <span className={s.dialogsItems}> {dialogsElements} </span>\n            <div className={s.messages}>\n                {messagesElements}\n                {/*<CustomForms title={'send text'} value={props.text} onChange={onMessageChange} onClick={addMessage}/>*/}\n                <DialogsReduxForm onSubmit={onSubmit}/>\n            </div>\n        </div>\n    )\n}\n\nexport default Dialogs;\n\n\n","import React, {ChangeEvent} from 'react';\nimport {DialogsType, MessageType} from \"../../Redux/store\";\n\nimport Dialogs from './Dialogs';\nimport {AppStateType} from \"../../Redux/redux-store\";\nimport {connect} from \"react-redux\";\nimport {compose, Dispatch} from \"redux\";\nimport {addMessageActionCreator, onMessageChangeActionCreator} from \"../../Redux/dialogsReducer\";\nimport {RedirectIfNotAuth} from \"../../HOCs/RedirectIfNotAuth\";\n\ntype MapStatePropsType = {\n    dialogs: Array<DialogsType>,\n    messages: Array<MessageType>,\n    text: string\n    auth: boolean\n\n}\n\ntype mapDispatchPropsType = {\n    addMessage: (newTextMessage:string) => void,\n    onMessageChange: (event: ChangeEvent<HTMLInputElement>) => void\n\n}\n\n\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\n    return {\n        dialogs: state.dialogsPage.dialogs,\n        messages: state.dialogsPage.messages,\n        text: state.dialogsPage.newTextMessage,\n        auth: state.auth.isAuth\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => {\n    return {\n        addMessage:(newTextMessage:string) => dispatch(addMessageActionCreator(newTextMessage)),\n        onMessageChange:(event: ChangeEvent<HTMLInputElement>)=> dispatch(onMessageChangeActionCreator(event.currentTarget.value))\n    }\n}\n\nexport default compose<React.ComponentType>(connect(mapStateToProps, mapDispatchToProps),RedirectIfNotAuth)(Dialogs) as React.FunctionComponent<any>\n\n"],"sourceRoot":""}